//Automagically names EXD getter funcs (Ghidra version of https://github.com/SapphireServer/ffxiv-ida-scripts/blob/master/xiv/ffxiv-exdgetters.py)
//@author Pohky
//@category __UserScripts
//@keybinding 
//@menupath XivTools.ExdGettersJava
//@toolbar 

import java.util.HashMap;

import ghidra.app.cmd.disassemble.DisassembleCommand;
import ghidra.app.script.GhidraScript;
import ghidra.program.model.mem.*;
import ghidra.program.model.symbol.SourceType;
import ghidra.util.exception.*;
import ghidra.program.model.address.*;

public class ffxiv_exdgetters extends GhidraScript {
	public void run() throws Exception {
		var block = currentProgram.getMemory().getBlock(".text");
		var addressMap = currentProgram.getAddressFactory().getAddressSet(block.getStart(), block.getEnd());
		
		var exdMap = getExdMap();
		var patternMap = getExdFuncPatterns();
		for(var pat : patternMap.entrySet()) {
			doPattern(pat.getKey(), pat.getValue(), addressMap, exdMap);
		}
	}

	
	private void doPattern(String pattern, String suffix, AddressSetView data, HashMap<Integer, String> map) {
		var list = findBytes(data, pattern, 4096, 2);
		monitor.initialize(list.length);
		for(var address : list) {
			monitor.setProgress(monitor.getProgress() + 1);
			var func = getFunctionAt(address);
			if(func == null) {
				var cmd = new DisassembleCommand(address, null, false);
				runCommand(cmd);
				
				func = createFunction(address, null);
			}
			
			if(func == null) {
				writer.println(String.format("Failed to get function at %s", address));
				continue;
			}
			
			var idxAddr = findBytes(func.getBody(), "\\xBA....", 1, 1);
			if(idxAddr.length == 0) {
				writer.println(String.format("No SheetID for %s", func));
				continue;
			}
			int idx = 0;
			try {
				idx = getInt(idxAddr[0].add(1));
			} catch (MemoryAccessException | AddressOutOfBoundsException e) {
				continue;
			}
			if(!map.containsKey(idx)) continue;
			var name = map.get(idx);
			var fName = String.format("Client::ExdData::Get%s%s", name, suffix);
			if(func.getName().equalsIgnoreCase(fName))
				continue;
			writer.println(String.format("%s - %s", address, fName));
			try {
				func.setName(fName, SourceType.USER_DEFINED);
			} catch (DuplicateNameException | InvalidInputException e) {
				continue;
			}
		}
	}
	
	private HashMap<String, String> getExdFuncPatterns(){
		// "signature", "name suffix"
		var map = new HashMap<String, String>();
		map.put("\\x48\\x83\\xEC\\x28\\x48\\x8B\\x05....\\x44\\x8B\\xC1\\xBA....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x75\\x05\\x48\\x83\\xC4\\x28\\xC3\\x48\\x8B\\x00\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x28\\x48\\x8B\\x05....\\xBA....\\x44\\x0F\\xB6\\xC1\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x75\\x05\\x48\\x83\\xC4\\x28\\xC3\\x48\\x8B\\x00\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x28\\x48\\x8B\\x05....\\x44\\x8D\\x81....\\xBA....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x75\\x05\\x48\\x83\\xC4\\x28\\xC3\\x48\\x8B\\x00\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x38\\x48\\x8B\\x05....\\x44\\x8B\\xCA\\x44\\x8B\\xC1\\x48\\xC7\\x44\\x24.....\\xBA....\\x48\\xC7\\x44\\x24.....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x75\\x05\\x48\\x83\\xC4\\x38\\xC3\\x48\\x8B\\x00\\x48\\x83\\xC4\\x38\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x28\\x48\\x8B\\x05....\\xBA....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x74\\x14\\x48\\x8B\\x10\\x48\\x8B\\xC8\\xFF\\x52\\x08\\x84\\xC0\\x75\\x07\\xB0\\x01\\x48\\x83\\xC4\\x28\\xC3\\x32\\xC0\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x28\\x85\\xC9\\x74\\x20\\x48\\x8B\\x05....\\x44\\x8B\\xC1\\xBA....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x75\\x07\\x33\\xC0\\x48\\x83\\xC4\\x28\\xC3\\x48\\x8B\\x00\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x83\\xEC\\x28\\x48\\x8B\\x05....\\x44\\x8B\\xC1\\xBA....\\x48\\x8B\\x88....\\xE8....\\x48\\x85\\xC0\\x74\\x17\\x48\\x8B\\x08\\x48\\x85\\xC9\\x74\\x0F\\x8B\\x01\\x25....\\x48\\x03\\xC1\\x48\\x83\\xC4\\x28\\xC3\\x33\\xC0\\x48\\x83\\xC4\\x28\\xC3", "");
		map.put("\\x48\\x8B\\x05....\\xBA....\\x48\\x8B\\x88....\\xE9", "::RowCount");
		return map;
	}
	
	private HashMap<Integer, String> getExdMap() {
		// id, "name"
		var map = new HashMap<Integer, String>();
		map.put(0, "Addon");
		map.put(1, "LinkRace");
		map.put(3, "ActionCategory");
		map.put(4, "Action");
		map.put(5, "Knockback");
		map.put(6, "Balloon");
		map.put(7, "Behavior");
		map.put(8, "BehaviorPath");
		map.put(9, "ItemSearchCategory");
		map.put(10, "Item");
		map.put(11, "ItemFood");
		map.put(12, "ItemSeries");
		map.put(13, "ItemSpecialBonus");
		map.put(14, "EquipSlotCategory");
		map.put(15, "ItemUICategory");
		map.put(16, "ItemAction");
		map.put(17, "ItemLevel");
		map.put(18, "MateriaJoinRate");
		map.put(19, "Materia");
		map.put(20, "MateriaTomestoneRate");
		map.put(21, "GatheringItem");
		map.put(22, "GatheringPointBase");
		map.put(23, "GatheringPointBonusType");
		map.put(24, "GatheringPoint");
		map.put(25, "GatheringExp");
		map.put(26, "GatheringType");
		map.put(27, "GatheringPointName");
		map.put(28, "GatheringCondition");
		map.put(30, "PetMirage");
		map.put(31, "QuestSystemDefine");
		map.put(32, "Quest");
		map.put(33, "LegacyQuest");
		map.put(34, "QuestRepeatFlag");
		map.put(35, "DeliveryQuest");
		map.put(36, "Treasure");
		map.put(37, "TreasureModel");
		map.put(38, "ModelChara");
		map.put(39, "ModelSkeleton");
		map.put(42, "Town");
		map.put(43, "Weather");
		map.put(44, "WeatherRate");
		map.put(45, "WeatherGroup");
		map.put(46, "BNpcBase");
		map.put(47, "BNpcName");
		map.put(48, "BNpcCustomize");
		map.put(49, "BNpcParts");
		map.put(50, "BNpcState");
		map.put(51, "Recipe");
		map.put(52, "CraftType");
		map.put(53, "TerritoryChatRule");
		map.put(54, "CraftAction");
		map.put(56, "RecipeLevelTable");
		map.put(57, "AnimaWeaponFUITalk");
		map.put(58, "Tribe");
		map.put(59, "ClassJob");
		map.put(60, "ClassJobCategory");
		map.put(61, "ArrayEventHandler");
		map.put(62, "Lobby");
		map.put(63, "Battalion");
		map.put(64, "Attributive");
		map.put(65, "TextCommand");
		map.put(66, "Completion");
		map.put(67, "TextCommandParam");
		map.put(68, "Error");
		map.put(69, "NotebookDivision");
		map.put(70, "Status");
		map.put(71, "LeveAssignmentType");
		map.put(72, "GuildleveEvaluation");
		map.put(73, "Leve");
		map.put(74, "LeveClient");
		map.put(75, "GuildleveAssignmentCategory");
		map.put(76, "GuildleveAssignment");
		map.put(77, "BattleLeve");
		map.put(78, "CraftLeve");
		map.put(79, "BattleLeveRule");
		map.put(80, "CraftLeveTalk");
		map.put(81, "LeveRewardItem");
		map.put(82, "LeveRewardItemGroup");
		map.put(83, "LeveSystemDefine");
		map.put(84, "LeveVfx");
		map.put(85, "GuildleveAssignmentTalk");
		map.put(86, "LeveString");
		map.put(87, "GatheringLeveRule");
		map.put(88, "GatheringLeve");
		map.put(89, "GatheringLeveRoute");
		map.put(90, "GatheringLeveBNpcEntry");
		map.put(91, "CompanyLeve");
		map.put(92, "CompanyLeveRule");
		map.put(93, "TerritoryIntendedUse");
		map.put(94, "TerritoryType");
		map.put(95, "Marker");
		map.put(96, "ENpcResident");
		map.put(97, "ENpcBase");
		map.put(98, "Trait");
		map.put(99, "PlaceName");
		map.put(100, "ActionTimeline");
		map.put(101, "AttackType");
		map.put(102, "NotebookList");
		map.put(103, "ConfigKey");
		map.put(104, "GeneralAction");
		map.put(105, "RecastNavimesh");
		map.put(106, "EObj");
		map.put(107, "Map");
		map.put(108, "MapMarker");
		map.put(109, "MapSymbol");
		map.put(110, "MotionTimeline");
		map.put(111, "MotionTimelineBlendTable");
		map.put(112, "MotionTimelineAdvanceBlend");
		map.put(113, "DefaultTalk");
		map.put(114, "CustomTalk");
		map.put(115, "WeaponTimeline");
		map.put(116, "Title");
		map.put(117, "PresetCamera");
		map.put(118, "VFX");
		map.put(119, "GimmickBill");
		map.put(120, "GimmickAccessor");
		map.put(121, "GimmickRect");
		map.put(122, "GimmickYesNo");
		map.put(123, "EventAction");
		map.put(124, "EventItem");
		map.put(125, "EventSystemDefine");
		map.put(126, "EventIconPriority");
		map.put(127, "EventIconType");
		map.put(128, "Cutscene");
		map.put(129, "CutsceneWorkIndex");
		map.put(130, "Role");
		map.put(131, "SE");
		map.put(133, "Mount");
		map.put(134, "BGM");
		map.put(135, "BGMScene");
		map.put(136, "BGMSituation");
		map.put(137, "BGMFade");
		map.put(138, "BGMFadeType");
		map.put(139, "BGMSystemDefine");
		map.put(140, "HowTo");
		map.put(141, "HowToPage");
		map.put(142, "HowToCategory");
		map.put(143, "InstanceContent");
		map.put(144, "InstanceContentType");
		map.put(145, "InstanceContentTextData");
		map.put(146, "GuildOrder");
		map.put(147, "GuildOrderGuide");
		map.put(148, "GuildOrderOfficer");
		map.put(149, "ContentTalk");
		map.put(150, "ContentTalkParam");
		map.put(151, "ContentNpcTalk");
		map.put(152, "InstanceContentGuide");
		map.put(153, "ContentRoulette");
		map.put(154, "InstanceContentBuff");
		map.put(155, "ExportedSG");
		map.put(156, "OnlineStatus");
		map.put(157, "LogKind");
		map.put(158, "LogMessage");
		map.put(160, "LogFilter");
		map.put(161, "Calendar");
		map.put(162, "JournalCategory");
		map.put(163, "JournalGenre");
		map.put(164, "Fate");
		map.put(165, "FateEvent");
		map.put(166, "PublicContent");
		map.put(167, "PublicContentTextData");
		map.put(168, "Level");
		map.put(169, "ParamGrow");
		map.put(170, "QuestBattle");
		map.put(171, "QuestBattleSystemDefine");
		map.put(172, "Companion");
		map.put(173, "CompanionMove");
		map.put(174, "CharaMakeType");
		map.put(175, "CharaMakeClassEquip");
		map.put(176, "CharaMakeName");
		map.put(177, "CharaMakeCustomize");
		map.put(178, "Race");
		map.put(179, "NpcYell");
		map.put(180, "DefaultTalkLipSyncType");
		map.put(181, "Emote");
		map.put(182, "EmoteMode");
		map.put(183, "EmoteCategory");
		map.put(184, "CutsceneMotion");
		map.put(185, "GuardianDeity");
		map.put(186, "GrandCompany");
		map.put(187, "GCRankLimsaMaleText");
		map.put(188, "GCRankLimsaFemaleText");
		map.put(189, "GCRankGridaniaMaleText");
		map.put(190, "GCRankGridaniaFemaleText");
		map.put(191, "GCRankUldahMaleText");
		map.put(192, "GCRankUldahFemaleText");
		map.put(193, "GrandCompanyRank");
		map.put(194, "GCShopItemCategory");
		map.put(196, "GCShop");
		map.put(197, "GCSupplyDuty");
		map.put(198, "GCSupplyDutyReward");
		map.put(199, "GCSupplyDefine");
		map.put(200, "AnimaWeaponFUITalkParam");
		map.put(202, "ChocoboTaxi");
		map.put(203, "ChocoboTaxiStand");
		map.put(204, "NpcEquip");
		map.put(205, "PvPAction");
		map.put(206, "PvPRank");
		map.put(207, "PvPTrait");
		map.put(208, "Frontline01");
		map.put(209, "Achievement");
		map.put(210, "AchievementCategory");
		map.put(211, "AchievementKind");
		map.put(212, "MonsterNote");
		map.put(213, "MonsterNoteTarget");
		map.put(214, "FCActivity");
		map.put(215, "FCAuthority");
		map.put(216, "FCHierarchy");
		map.put(217, "FCAuthorityCategory");
		map.put(218, "FCRank");
		map.put(219, "FCReputation");
		map.put(220, "FCRights");
		map.put(221, "FCChestName");
		map.put(222, "FCDefine");
		map.put(223, "FCCrestSymbol");
		map.put(224, "FCActivityCategory");
		map.put(225, "FCProfile");
		map.put(226, "Opening");
		map.put(227, "OpeningSystemDefine");
		map.put(228, "BuddyAction");
		map.put(229, "BuddyEquip");
		map.put(230, "Buddy");
		map.put(231, "BuddyRank");
		map.put(232, "BuddySkill");
		map.put(233, "BuddyItem");
		map.put(234, "BaseParam");
		map.put(235, "Warp");
		map.put(236, "WarpCondition");
		map.put(237, "WarpLogic");
		map.put(238, "Omen");
		map.put(239, "MainCommand");
		map.put(240, "MainCommandCategory");
		map.put(241, "PresetCameraAdjust");
		map.put(242, "AnimationLOD");
		map.put(243, "Cabinet");
		map.put(244, "Story");
		map.put(245, "StorySystemDefine");
		map.put(246, "FishingSpot");
		map.put(247, "FishParameter");
		map.put(249, "FishingRecordType");
		map.put(250, "AddonParam");
		map.put(252, "Aetheryte");
		map.put(253, "AetheryteSystemDefine");
		map.put(255, "PhysicsGroup");
		map.put(256, "PhysicsOffGroup");
		map.put(257, "PhysicsWind");
		map.put(258, "MovieSubtitle");
		map.put(259, "MovieSubtitleVoyage");
		map.put(260, "Pet");
		map.put(261, "PetAction");
		map.put(262, "Festival");
		map.put(263, "MacroIcon");
		map.put(264, "CompanyAction");
		map.put(265, "Jingle");
		map.put(266, "Channeling");
		map.put(267, "SpecialShop");
		map.put(268, "SpecialShopItemCategory");
		map.put(269, "RecommendContents");
		map.put(270, "Ballista");
		map.put(271, "Stain");
		map.put(272, "HousingExterior");
		map.put(273, "HousingInterior");
		map.put(275, "HousingYardObject");
		map.put(276, "HousingPreset");
		map.put(277, "HousingFurniture");
		map.put(279, "HousingLandSet");
		map.put(280, "GcArmyMember");
		map.put(282, "Carry");
		map.put(283, "TreasureSpot");
		map.put(284, "BeastReputationRank");
		map.put(285, "BeastTribe");
		map.put(286, "CycleTime");
		map.put(287, "HairMakeType");
		map.put(288, "CutScreenImage");
		map.put(289, "ContentsNote");
		map.put(290, "ContentsNoteCategory");
		map.put(291, "ContentsNoteLevel");
		map.put(292, "ContentType");
		map.put(293, "GardeningSeed");
		map.put(294, "Lockon");
		map.put(296, "FieldMarker");
		map.put(297, "RetainerTask");
		map.put(298, "RetainerTaskLvRange");
		map.put(299, "RetainerTaskNormal");
		map.put(301, "RetainerTaskRandom");
		map.put(302, "RetainerTaskParameter");
		map.put(303, "Tomestones");
		map.put(304, "SwitchTalk");
		map.put(305, "RelicMateria");
		map.put(306, "Relic");
		map.put(307, "RelicNote");
		map.put(309, "RelicNoteCategory");
		map.put(310, "Relic3");
		map.put(311, "Relic3Materia");
		map.put(312, "Relic3Rate");
		map.put(313, "Relic3RatePattern");
		map.put(314, "GimmickJump");
		map.put(315, "Transformation");
		map.put(316, "Adventure");
		map.put(317, "DailySupplyItem");
		map.put(320, "MobHuntTarget");
		map.put(321, "PatchMark");
		map.put(322, "ScreenImage");
		map.put(323, "DirectorSystemDefine");
		map.put(324, "DirectorType");
		map.put(325, "Resident");
		map.put(327, "GoldSaucerTalk");
		map.put(328, "World");
		map.put(329, "WorldDCGroupType");
		map.put(330, "Permission");
		map.put(331, "MoveControl");
		map.put(332, "RecipeNotebookList");
		map.put(333, "CompleteJournal");
		map.put(334, "CompleteJournalCategory");
		map.put(335, "GatheringItemPoint");
		map.put(336, "GatheringNotebookList");
		map.put(339, "PublicContentCutscene");
		map.put(340, "MacroIconRedirectOld");
		map.put(341, "WeddingPlan");
		map.put(342, "WeddingFlowerColor");
		map.put(343, "WeddingBGM");
		map.put(344, "RelicItem");
		map.put(345, "TraitRecast");
		map.put(346, "GoldSaucerArcadeMachine");
		map.put(347, "TripleTriadCard");
		map.put(348, "LoadingTips");
		map.put(349, "LoadingTipsSub");
		map.put(352, "TripleTriad");
		map.put(353, "ChocoboRaceAbilityType");
		map.put(354, "ChocoboRaceAbility");
		map.put(355, "ChocoboRaceItem");
		map.put(356, "ChocoboRaceTutorial");
		map.put(357, "AetherialWheel");
		map.put(360, "TripleTriadRule");
		map.put(361, "GFateClimbing");
		map.put(362, "ChocoboRace");
		map.put(363, "RacingChocoboItem");
		map.put(364, "GFateHiddenObject");
		map.put(365, "ChocoboRaceCalculateParam");
		map.put(366, "GoldSaucerTextData");
		map.put(367, "WeeklyLotBonusThreshold");
		map.put(368, "WeeklyLotBonus");
		map.put(369, "ChocoboRaceRank");
		map.put(370, "ChocoboRaceStatus");
		map.put(371, "ChocoboRaceTerritory");
		map.put(372, "GFateStelth");
		map.put(373, "Frontline02");
		map.put(374, "TripleTriadCardType");
		map.put(375, "RacingChocoboName");
		map.put(377, "GFateDance");
		map.put(378, "GFateRoulette");
		map.put(379, "RacingChocoboParam");
		map.put(382, "RacingChocoboNameCategory");
		map.put(384, "RacingChocoboNameInfo");
		map.put(385, "RacingChocoboGrade");
		map.put(387, "TripleTriadResident");
		map.put(388, "GFATE");
		map.put(390, "TripleTriadCompetition");
		map.put(391, "TripleTriadDefine");
		map.put(392, "TripleTriadCardRarity");
		map.put(394, "Relic6Magicite");
		map.put(395, "TripleTriadCardResident");
		map.put(396, "ChocoboRaceWeather");
		map.put(397, "ChocoboRaceRanking");
		map.put(400, "CompanyCraftSequence");
		map.put(402, "AddonTransient");
		map.put(403, "TreasureHuntRank");
		map.put(404, "MountFlyingCondition");
		map.put(405, "TreasureHuntTexture");
		map.put(406, "Frontline");
		map.put(408, "AirshipExplorationPart");
		map.put(409, "AirshipExplorationLevel");
		map.put(410, "AirshipExplorationPoint");
		map.put(412, "AirshipExplorationLog");
		map.put(413, "GatheringItemLevelConvertTable");
		map.put(414, "CutsceneActorSize");
		map.put(415, "MobHuntRewardCap");
		map.put(418, "MountAction");
		map.put(419, "ExVersion");
		map.put(421, "FccShop");
		map.put(422, "CompanyCraftProcess");
		map.put(423, "CompanyCraftPart");
		map.put(424, "Frontline03");
		map.put(425, "CompanyCraftDraftCategory");
		map.put(426, "HousingUnitedExterior");
		map.put(428, "CompanyCraftType");
		map.put(429, "CompanyCraftDraft");
		map.put(430, "ActionProcStatus");
		map.put(431, "ActionIndirection");
		map.put(432, "QuestRewardOther");
		map.put(433, "ZoneTimeline");
		map.put(434, "MobHuntOrder");
		map.put(435, "MobHuntReward");
		map.put(436, "MinionStage");
		map.put(437, "AirshipExplorationParamType");
		map.put(439, "CutsceneEventMotion");
		map.put(440, "AetherCurrentCompFlgSet");
		map.put(441, "ZoneSharedGroup");
		map.put(442, "GatheringSubCategory");
		map.put(445, "Credit");
		map.put(446, "CreditCast");
		map.put(447, "GatheringPointBonus");
		map.put(448, "CompanyCraftManufactoryState");
		map.put(449, "CompanyCraftSupplyItem");
		map.put(451, "StatusHitEffect");
		map.put(452, "AetherCurrent");
		map.put(454, "ClassJobResident");
		map.put(455, "CompanionTransient");
		map.put(461, "HouseRetainerPose");
		map.put(463, "MountTransient");
		map.put(464, "EventItemCastTimeline");
		map.put(465, "EventItemTimeline");
		map.put(466, "SecretRecipeBook");
		map.put(467, "TraitTransient");
		map.put(468, "PvPRankTransient");
		map.put(469, "HousingMateAuthority");
		map.put(470, "MateAuthorityCategory");
		map.put(471, "HousingPlacement");
		map.put(472, "StainTransient");
		map.put(473, "MinionRules");
		map.put(474, "QuestClassJobReward");
		map.put(475, "ContentMemberType");
		map.put(476, "ContentFinderCondition");
		map.put(479, "MinionRace");
		map.put(480, "PartyContentCutscene");
		map.put(481, "PartyContent");
		map.put(483, "PartyContentTextData");
		map.put(484, "MinionSkillType");
		map.put(485, "GCScripShopCategory");
		map.put(486, "GCScripShopItem");
		map.put(487, "AirshipSkyIsland");
		map.put(488, "SkyIslandSubject");
		map.put(489, "SkyIslandMapMarker");
		map.put(490, "PartyContentTransient");
		map.put(491, "DpsChallengeOfficer");
		map.put(492, "DpsChallenge");
		map.put(493, "Tutorial");
		map.put(494, "QuestEquipModel");
		map.put(495, "ColosseumMatchRank");
		map.put(497, "ChocoboRaceChallenge");
		map.put(498, "TerritoryTypeTransient");
		map.put(499, "Orchestrion");
		map.put(500, "TutorialTank");
		map.put(501, "TutorialHealer");
		map.put(502, "TutorialDPS");
		map.put(503, "JournalSection");
		map.put(504, "OrchestrionPath");
		map.put(505, "OrchestrionCategory");
		map.put(506, "OrchestrionUiparam");
		map.put(507, "TopicSelect");
		map.put(508, "PlantPotFlowerSeed");
		map.put(509, "ContentUICategory");
		map.put(510, "VaseFlower");
		map.put(511, "BeastRankBonus");
		map.put(512, "EventItemCategory");
		map.put(513, "HousingUnplacement");
		map.put(514, "YKW");
		map.put(515, "DeepDungeonRoom");
		map.put(516, "GcArmyProgress");
		map.put(517, "GcArmyTraining");
		map.put(518, "DeepDungeonMap5X");
		map.put(519, "GcArmyExpedition");
		map.put(520, "GcArmyExpeditionMemberBonus");
		map.put(521, "GcArmyExpeditionTrait");
		map.put(522, "GcArmyExpeditionTraitCond");
		map.put(523, "MoveTimeline");
		map.put(524, "AnimaWeapon5TradeItem");
		map.put(525, "AnimaWeapon5PatternGroup");
		map.put(526, "Spectator");
		map.put(527, "Frontline04");
		map.put(528, "InstanceContentRewardItem");
		map.put(529, "GcArmyExpeditionType");
		map.put(530, "AnimaWeapon5Param");
		map.put(531, "AnimaWeaponIcon");
		map.put(532, "AnimaWeapon5");
		map.put(533, "AnimaWeaponItem");
		map.put(534, "DeepDungeonLayer");
		map.put(535, "Vase");
		map.put(537, "GcArmyMemberGrowExp");
		map.put(539, "DeepDungeonItem");
		map.put(540, "DeepDungeonEquipment");
		map.put(541, "DeepDungeon");
		map.put(542, "GcArmyMemberGrow");
		map.put(543, "DeepDungeonStatus");
		map.put(544, "AnimaWeapon5SpiritTalkType");
		map.put(545, "AnimaWeapon5SpiritTalk");
		map.put(546, "DeepDungeonBan");
		map.put(547, "DeepDungeonDanger");
		map.put(548, "AnimaWeapon5SpiritTalkParam");
		map.put(549, "DeepDungeonFloorEffectUI");
		map.put(550, "DeepDungeonGrowData");
		map.put(552, "RetainerTaskParameterLvDiff");
		map.put(553, "ColorFilter");
		map.put(554, "GcArmyCandidateCategory");
		map.put(555, "ContentFinderConditionTransient");
		map.put(556, "GoldSaucerContent");
		map.put(557, "WeeklyBingoText");
		map.put(558, "WeeklyBingoOrderData");
		map.put(559, "WeeklyBingoRewardData");
		map.put(560, "AquariumWater");
		map.put(561, "AquariumFish");
		map.put(562, "MateriaParam");
		map.put(563, "EObjName");
		map.put(564, "EventItemHelp");
		map.put(565, "SkyIsland");
		map.put(568, "ActionTransient");
		map.put(569, "HousingMapMarkerInfo");
		map.put(570, "Colosseum");
		map.put(571, "TomestonesItem");
		map.put(573, "EventVfx");
		map.put(574, "ExtraCommand");
		map.put(575, "GroupPoseCharaStatus");
		map.put(576, "DisposalShopFilterType");
		map.put(577, "DisposalShop");
		map.put(578, "DisposalShopItem");
		map.put(579, "LotteryExchangeShop");
		map.put(581, "DpsChallengeTransient");
		map.put(582, "Picture");
		map.put(583, "SkyIsland2MissionDetail");
		map.put(584, "SkyIsland2Mission");
		map.put(586, "ResidentMotionType");
		map.put(587, "MoveVfx");
		map.put(588, "SkyIsland2");
		map.put(590, "SatisfactionSupply");
		map.put(591, "SatisfactionNpc");
		map.put(592, "SatisfactionSupplyReward");
		map.put(593, "QuickChat");
		map.put(594, "QuickChatTransient");
		map.put(595, "SkyIsland2RangeType");
		map.put(596, "AddonTalkParam");
		map.put(598, "SkyIsland2MissionType");
		map.put(599, "StatusLoopVFX");
		map.put(600, "BenchmarkOverrideEquipment");
		map.put(601, "ContentExAction");
		map.put(602, "GilShopItem");
		map.put(603, "GilShop");
		map.put(604, "BenchmarkCutSceneTable");
		map.put(605, "BacklightColor");
		map.put(606, "NotoriousMonsterTerritory");
		map.put(607, "NotoriousMonster");
		map.put(608, "ActionTimelineReplace");
		map.put(610, "SpearfishingItem");
		map.put(611, "MobHuntOrderType");
		map.put(612, "ScenarioTree");
		map.put(613, "ActionParam");
		map.put(614, "ScenarioTreeTips");
		map.put(615, "ContentGauge");
		map.put(616, "ContentGaugeColor");
		map.put(618, "ActivityFeedImages");
		map.put(619, "ActivityFeedCaptions");
		map.put(620, "ActivityFeedGroupCaptions");
		map.put(621, "Snipe");
		map.put(622, "QTE");
		map.put(623, "SnipeCollision");
		map.put(624, "ActionCastVFX");
		map.put(625, "SnipePerformanceCamera");
		map.put(626, "WeatherReportReplace");
		map.put(628, "SpearfishingEcology");
		map.put(629, "BNpcAnnounceIcon");
		map.put(630, "MapMarkerRegion");
		map.put(631, "CabinetCategory");
		map.put(633, "SnipeElementId");
		map.put(634, "SpearfishingNotebook");
		map.put(635, "HousingAethernet");
		map.put(636, "FishingRecordTypeTransient");
		map.put(637, "SpearfishingRecordPage");
		map.put(638, "ContentAttributeRect");
		map.put(639, "PvPSelectTrait");
		map.put(641, "MountSpeed");
		map.put(642, "ActionComboRoute");
		map.put(643, "PvPActionSort");
		map.put(644, "TomestoneConvert");
		map.put(645, "EquipRaceCategory");
		map.put(646, "ActivityFeedButtons");
		map.put(647, "PvPInitialSelectActionTrait");
		map.put(648, "AdventureExPhase");
		map.put(651, "ActionComboRouteTransient");
		map.put(652, "ContentDirectorManagedSG");
		map.put(653, "SEBattle");
		map.put(655, "PvPSelectTraitTransient");
		map.put(656, "ActionCastTimeline");
		map.put(659, "ScenarioType");
		map.put(660, "GcArmyCapture");
		map.put(662, "BgcArmyAction");
		map.put(663, "LoadingImage");
		map.put(664, "BgcArmyActionTransient");
		map.put(666, "SatisfactionSupplyRewardExp");
		map.put(667, "AddonHudSize");
		map.put(668, "GcArmyCaptureTactics");
		map.put(669, "GcArmyEquipPreset");
		map.put(670, "ContentRouletteRoleBonus");
		map.put(671, "ContentRewardCondition");
		map.put(672, "BGMSwitch");
		map.put(673, "ManeuversArmor");
		map.put(674, "Maneuvers");
		map.put(676, "HousingEmploymentNpcRace");
		map.put(678, "HousingEmploymentNpcList");
		map.put(679, "Perform");
		map.put(680, "PerformTransient");
		map.put(682, "SubmarineSpecCategory");
		map.put(683, "SubmarineExploration");
		map.put(684, "SubmarinePart");
		map.put(685, "SubmarineRank");
		map.put(687, "ModelAttribute");
		map.put(689, "ModelScale");
		map.put(690, "ScenarioTreeTipsClassQuest");
		map.put(692, "ExHotbarCrossbarIndexType");
		map.put(693, "ModelState");
		map.put(694, "SubmarineExplorationLog");
		map.put(695, "ContentEffectiveTime");
		map.put(696, "XPVPGroupActivity");
		map.put(697, "SnipeHitEvent");
		map.put(698, "MountCustomize");
		map.put(699, "FashionCheckThemeCategory");
		map.put(700, "Condition");
		map.put(701, "FashionCheckWeeklyTheme");
		map.put(704, "ContentEntry");
		map.put(705, "EurekaGrowData");
		map.put(706, "EurekaSphereElementAdjust");
		map.put(707, "ContentRouletteOpenRule");
		map.put(708, "EurekaAethernet");
		map.put(709, "ActionTimelineMove");
		map.put(710, "EurekaStoryProgress");
		map.put(711, "QuestClassJobSupply");
		map.put(712, "DescriptionSection");
		map.put(713, "DescriptionPage");
		map.put(714, "DeepDungeonMagicStone");
		map.put(715, "LootModeType");
		map.put(716, "RPParameter");
		map.put(717, "PreHandler");
		map.put(718, "ContentCloseCycle");
		map.put(719, "HousingPileLimit");
		map.put(720, "Description");
		map.put(722, "EurekaAetherItem");
		map.put(723, "Eureka");
		map.put(724, "DomaStoryProgress");
		map.put(725, "ContentsNoteRewardEurekaEXP");
		map.put(729, "DescriptionString");
		map.put(731, "AddonLayout");
		map.put(733, "CutsceneName");
		map.put(734, "AozAction");
		map.put(735, "UIColor");
		map.put(736, "GilShopInfo");
		map.put(737, "HousingMerchantPose");
		map.put(738, "GFateClimbing2");
		map.put(740, "HousingAppeal");
		map.put(741, "GFateClimbing2TotemType");
		map.put(742, "EurekaMagiaAction");
		map.put(743, "EurekaMagiciteItemType");
		map.put(744, "EurekaMagiciteItem");
		map.put(746, "GFateClimbing2Content");
		map.put(747, "AozActionTransient");
		map.put(748, "EurekaLogosMixerProbability");
		map.put(749, "MiniGameRA");
		map.put(750, "MiniGameRANotes");
		map.put(751, "ActionInit");
		map.put(752, "EmjAddon");
		map.put(753, "RideShootingScheduler");
		map.put(755, "RideShootingTargetScheduler");
		map.put(756, "RideShootingTarget");
		map.put(757, "RideShootingTargetType");
		map.put(759, "RideShootingTextData");
		map.put(760, "GFateRideShooting");
		map.put(761, "AOZScore");
		map.put(762, "EmjCharaViewCamera");
		map.put(763, "AOZContent");
		map.put(765, "AOZContentBriefingBNpc");
		map.put(766, "AOZArrangement");
		map.put(767, "AOZBoss");
		map.put(768, "RideShooting");
		map.put(769, "CreditBackImage");
		map.put(770, "CreditFont");
		map.put(773, "CreditList");
		map.put(775, "CreditListText");
		map.put(776, "CreditDataSet");
		map.put(777, "AOZWeeklyReward");
		map.put(778, "EmjDani");
		map.put(781, "CustomTalkNestHandlers");
		map.put(782, "EurekaDungeonPortal");
		map.put(783, "ENpcDressUpDress");
		map.put(784, "ENpcDressUp");
		map.put(785, "InstanceContentCSBonus");
		map.put(786, "NotebookDivisionCategory");
		map.put(787, "CreditVersion");
		map.put(788, "DawnQuestMember");
		map.put(790, "DawnMember");
		map.put(791, "DawnContent");
		map.put(792, "CutActionTimeline");
		map.put(795, "QuestRedo");
		map.put(801, "OpenContent");
		map.put(803, "ContentRandomSelect");
		map.put(804, "ContentTodo");
		map.put(805, "MateriaJoinRateGatherCraft");
		map.put(806, "DawnContentParticipable");
		map.put(808, "HugeCraftworksNpc");
		map.put(810, "IndividualWeather");
		map.put(811, "DawnGrowMember");
		map.put(812, "CraftLevelDifference");
		map.put(813, "HugeCraftworksRank");
		map.put(814, "SubmarineMap");
		map.put(816, "GatheringRarePopTimeTable");
		map.put(817, "GatheringPointTransient");
		map.put(819, "OpenContentCandidateName");
		map.put(820, "SnipeTalk");
		map.put(822, "SnipeTalkName");
		map.put(823, "MovieSubtitle500");
		map.put(825, "FateProgressUI");
		map.put(826, "FurnitureCatalogItemList");
		map.put(827, "FurnitureCatalogCategory");
		map.put(828, "YardCatalogCategory");
		map.put(829, "YardCatalogItemList");
		map.put(830, "Guide");
		map.put(831, "GuideTitle");
		map.put(832, "GuidePageString");
		map.put(833, "GuidePage");
		map.put(836, "JobHudManualPriority");
		map.put(837, "JobHudManual");
		map.put(838, "CustomTalkResident");
		map.put(839, "QuestBattleResident");
		map.put(840, "AchievementHideCondition");
		map.put(842, "DawnMemberUIParam");
		map.put(843, "ItemBarterCheck");
		map.put(845, "QuestRedoChapter");
		map.put(847, "Hud");
		map.put(848, "QuestChapter");
		map.put(849, "CollisionIdPallet");
		map.put(851, "HudTransient");
		map.put(855, "HWDSharedGroupControlParam");
		map.put(856, "HWDSharedGroup");
		map.put(857, "SystemGraphicPreset");
		map.put(858, "CircleActivity");
		map.put(860, "EmoteTransient");
		map.put(862, "QuestDerivedClass");
		map.put(863, "AOZReport");
		map.put(865, "AOZReportReward");
		map.put(866, "GroupPoseCharacterShowPreset");
		map.put(868, "HWDInfoBoardArticle");
		map.put(869, "HWDInfoBoardArticleType");
		map.put(870, "HWDInfoBoardArticleTransient");
		map.put(871, "McGuffin");
		map.put(872, "McGuffinUIData");
		map.put(873, "MapCondition");
		map.put(874, "PerformGuideScore");
		map.put(875, "DescriptionStandAlone");
		map.put(876, "DescriptionStandAloneTransient");
		map.put(877, "HWDDevProgress");
		map.put(878, "HWDDevLevelUI");
		map.put(879, "HWDDevLayerControl");
		map.put(880, "HWDDevLively");
		map.put(881, "HWDCrafterSupplyReward");
		map.put(883, "HWDCrafterSupply");
		map.put(885, "QuestRedoIncompChapter");
		map.put(887, "RecipeLookup");
		map.put(888, "QuestRedoChapterUI");
		map.put(889, "QuestRedoChapterUICategory");
		map.put(890, "HWDLevelChangeDeception");
		map.put(891, "ActionCostType");
		map.put(892, "FateTokenType");
		map.put(893, "HWDAnnounce");
		map.put(894, "HWDDevLevelWebText");
		map.put(895, "HWDGathererInspectionReward");
		map.put(896, "HWDGathererInspection");
		map.put(897, "IKDRoute");
		map.put(898, "IKDSpot");
		map.put(899, "FateRuleEx");
		map.put(900, "QuestRedoChapterUITab");
		map.put(902, "HWDInfoBoardBackNumber");
		map.put(904, "HWDGathereInspectTerm");
		map.put(905, "IKDContentBonus");
		map.put(906, "Attract");
		map.put(907, "HWDCrafterSupplyTerm");
		map.put(908, "IKDRouteTable");
		map.put(909, "OrnamentCustomizeGroup");
		map.put(910, "Ornament");
		map.put(911, "GatheringNotebookItem");
		map.put(912, "IKDTimeDefine");
		map.put(913, "StanceChange");
		map.put(914, "OrnamentCustomize");
		map.put(915, "OrnamentTransient");
		map.put(916, "GimmickTalk");
		map.put(917, "GroupPoseFrame");
		map.put(918, "BehaviorMove");
		map.put(919, "PublicContentType");
		map.put(920, "IKDFishParam");
		map.put(922, "InclusionShop");
		map.put(923, "Skirmish");
		map.put(924, "DynamicEvent");
		map.put(926, "InclusionShopCategory");
		map.put(927, "InclusionShopSeries");
		map.put(928, "FishParameterReverse");
		map.put(929, "SpearfishingItemReverse");
		map.put(930, "ItemActionTelepo");
		map.put(931, "SwitchTalkVariation");
		map.put(932, "CollectablesShop");
		map.put(933, "CollectablesShopItem");
		map.put(934, "PreHandlerMovement");
		map.put(935, "CollectablesShopRefine");
		map.put(936, "CollectablesShopRewardItem");
		map.put(937, "DynamicEventType");
		map.put(938, "LFGExtensionContent");
		map.put(939, "CollectablesShopRewardScrip");
		map.put(940, "CollectablesShopItemGroup");
		map.put(941, "MYCWarResultNotebook");
		map.put(942, "ItemOnceHqMasterpiece");
		map.put(943, "DynamicEventSet");
		map.put(944, "DynamicEventManager");
		map.put(946, "DynamicEventEnemyType");
		map.put(947, "MYCTemporaryItem");
		map.put(948, "MYCTemporaryItemUICategory");
		map.put(949, "QuestEffectType");
		map.put(950, "GroupPoseStamp");
		map.put(951, "GroupPoseStampCategory");
		map.put(952, "QuestEffect");
		map.put(953, "QuestEffectDefine");
		map.put(954, "QuestAcceptAdditionCondition");
		map.put(955, "DynamicEventSingleBattle");
		map.put(956, "JigsawScore");
		map.put(957, "JigsawTimeBonus");
		map.put(958, "QuestStatusParam");
		map.put(959, "ItemSortCategory");
		map.put(960, "SatisfactionArbitration");
		map.put(961, "SequentialEvent");
		map.put(962, "HousingTrainingDoll");
		map.put(964, "CurrencyScripConvert");
		map.put(965, "FateMode");
		map.put(968, "WebGuidance");
		map.put(969, "WebURL");
		map.put(970, "OpenLuaUI");
		map.put(971, "TripleTriadTournament");
		map.put(974, "ContentTourismConstruct");
		map.put(975, "ContentsTutorial");
		map.put(976, "ContentsTutorialPage");
		map.put(977, "RetainerFortuneRewardRange");
		map.put(978, "BKJLivestock");
		map.put(979, "MovieStaffList");
		map.put(980, "ResistanceWeaponAdjust");
		map.put(981, "BKJPouch");
		map.put(982, "BKJEObj");
		map.put(983, "BKJSpecialtyGoods");
		map.put(984, "BKJSeed");
		map.put(985, "BKJShipment");
		map.put(986, "QuestHideReward");
		map.put(987, "IKDPlayerMissionCondition");
		map.put(988, "TriggerEffect");
		map.put(990, "AdvancedVibration");
		map.put(991, "EventSituationIconTooltip");
		map.put(992, "GroupPoseStampFontColor");
		map.put(993, "UDS_Object");
		map.put(994, "UDS_Event");
		map.put(995, "UDS_Property");
		map.put(996, "UDS_Stats");
		map.put(997, "SequentialEventMultipleRange");
		map.put(998, "CutSceneIncompQuest");
		map.put(1000, "PerformGroup");
		map.put(1001, "ExportedGatheringPoint");
		map.put(1002, "QuestRecomplete");
		map.put(1003, "EventCustomIconType");
		map.put(1004, "AchievementTarget");
		map.put(1005, "QuestCustomTodo");
		map.put(1006, "TripleTriadCardObtain");
		map.put(1007, "RaidFinderParam");
		map.put(1008, "InclusionShopWelcomText");
		map.put(1009, "InclusionShopWelcom");
		map.put(1010, "MateriaGrade");
		map.put(1012, "ItemRepairPrice");
		map.put(1013, "ItemRepairResource");
		map.put(1014, "SharlayanCraftWorks");
		map.put(1015, "SharlayanCraftWorksSupply");
		map.put(1016, "TerritoryTypeTelepo");
		map.put(1017, "TelepoRelay");
		map.put(1019, "ItemRetainerLevelUp");
		map.put(1020, "AetheryteTransient");
		map.put(1021, "Booster");
		map.put(1022, "ItemStainCondition");
		map.put(1023, "MapType");
		map.put(1024, "EventPathMove");
		map.put(1025, "MapExclusive");
		map.put(1026, "FateShop");
		map.put(1027, "SpearfishingComboTarget");
		map.put(1028, "SpearfishingSilhouette");
		map.put(1029, "PlayerSearchLocation");
		map.put(1030, "PlayerSearchSubLocation");
		map.put(1033, "InstanceContentQICData");
		map.put(1035, "ReactionEventObjectInfo");
		map.put(1036, "ReactionEventObject");
		map.put(1039, "FittingShopCategoryItem");
		map.put(1040, "ArchiveItem");
		map.put(1041, "BNpcBasePopVfx");
		map.put(1042, "MapTransientPvPMap");
		map.put(1043, "PvPSeries");
		map.put(1044, "PvPSeriesLevel");
		map.put(1045, "OrnamentAction");
		map.put(1046, "MJICraftworksRankRatio");
		map.put(1047, "BannerTimeline");
		map.put(1048, "BannerBg");
		map.put(1049, "BannerFrame");
		map.put(1051, "BannerCondition");
		map.put(1052, "BannerDecoration");
		map.put(1053, "BannerFacial");
		map.put(1054, "UIConst");
		map.put(1055, "IconLanguage");
		map.put(1056, "FittingShop");
		map.put(1057, "FittingShopCategory");
		map.put(1058, "FittingShopItemSet");
		map.put(1059, "Omikuji");
		map.put(1060, "OmikujiGuidance");
		map.put(1061, "GameRewardObtainType");
		map.put(1062, "AkatsukiNote");
		map.put(1063, "AkatsukiNoteString");
		map.put(1064, "MJIFunction");
		map.put(1065, "MJIRank");
		map.put(1066, "MJIVillageDevelopment");
		map.put(1067, "MJIItemPouch");
		map.put(1068, "MJIVillageAppearanceSG");
		map.put(1069, "MJIGatheringObject");
		map.put(1070, "MJIGathering");
		map.put(1071, "MJIRecipe");
		map.put(1072, "CharaCardPlayStyle");
		map.put(1073, "MJIRecipeMaterial");
		map.put(1074, "CharaCardBase");
		map.put(1075, "BannerDesignPreset");
		map.put(1076, "CharaCardHeader");
		map.put(1077, "CharaCardDecoration");
		map.put(1078, "CharaCardDesignPreset");
		map.put(1080, "MJICraftworksObject");
		map.put(1082, "MJICraftworksSupplyDefine");
		map.put(1083, "MJICraftworksTension");
		map.put(1084, "BannerPreset");
		map.put(1085, "CharaCardDesignType");
		map.put(1086, "MJICraftworksPopularityType");
		map.put(1087, "MJICraftworksPopularity");
		map.put(1088, "MJIKeyItem");
		map.put(1089, "MJIDisposalShopItem");
		map.put(1090, "MJILivelyActor");
		map.put(1091, "MJIStockyardManagementArea");
		map.put(1092, "MJIStockyardManagementTable");
		map.put(1093, "QuestSetDefine");
		map.put(1094, "MJIBuilding");
		map.put(1095, "MJILandmarkPlace");
		map.put(1096, "MJILandmark");
		map.put(1097, "MJIBuildingPlace");
		map.put(1098, "MJIHudMode");
		map.put(1099, "MJIItemCategory");
		map.put(1100, "BannerObtainHintType");
		map.put(1101, "VVDData");
		map.put(1102, "MJICraftworksObjectTheme");
		map.put(1104, "MJIProgress");
		map.put(1105, "VVDVariantAction");
		map.put(1106, "MJIGatheringItem");
		map.put(1107, "MJIAnimals");
		map.put(1108, "MJIGatheringTool");
		map.put(1109, "MJIMinionPopAreas");
		map.put(1110, "MJIText");
		map.put(1111, "VVDRouteData");
		map.put(1112, "VVDNotebookSeries");
		map.put(1113, "VVDNotebookContents");
		map.put(1114, "MJIDisposalShopUICategory");
		map.put(1115, "ClassJobActionSort");
		map.put(1116, "MJIFarmPastureRank");
		map.put(1117, "MJICropSeed");
		map.put(1118, "MJIVillageAppearanceUI");
		map.put(1119, "ContentEventItem");
		map.put(1120, "SatisfactionBonusGuarantee");
		map.put(1121, "PvPBaseParamValue");
		map.put(1122, "MultipleHelp");
		map.put(1123, "MultipleHelpPage");
		map.put(1124, "MultipleHelpString");
		map.put(1125, "ShellFixedFromCommand");
		map.put(1126, "QuestDefineClient");
		map.put(1127, "GathererReductionReward");
		map.put(1129, "TofuObject");
		map.put(1130, "TofuObjectCategory");
		map.put(1131, "MapReplace");
		map.put(1133, "QuestLinkMarker");
		map.put(1134, "QuestLinkMarkerSet");
		map.put(1135, "DeepDungeonDemiclone");
		map.put(1136, "FishingBaitParameter");
		map.put(1137, "PreviewableItems");
		map.put(1138, "GathererCrafterTool");
		map.put(1139, "TofuEditParam");
		map.put(1140, "QuestSelectTitle");
		return map;
	}
}